#!/usr/bin/env python3
"""
Relat√≥rio Consolidado Final - ATous Secure Network
An√°lise completa do sistema de defesa com dados corretos
"""

import json
import os
from datetime import datetime

def generate_consolidated_report():
    print("="*100)
    print("RELAT√ìRIO CONSOLIDADO FINAL - SISTEMA DE DEFESA ATOUS SECURE NETWORK")
    print("="*100)
    print(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()
    
    # Carregar dados dos testes de seguran√ßa
    security_data = load_security_report()
    
    print("üõ°Ô∏è AN√ÅLISE COMPLETA DO SISTEMA DE DEFESA")
    print("="*100)
    
    print("\n1. RESULTADOS DOS TESTES DE SEGURAN√áA")
    print("-" * 70)
    
    if security_data:
        total_tests = security_data.get('total_tests', 0)
        passed_tests = security_data.get('passed_tests', 0)
        failed_tests = security_data.get('failed_tests', 0)
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"   üìä Total de testes executados: {total_tests}")
        print(f"   ‚úÖ Testes aprovados: {passed_tests}")
        print(f"   ‚ùå Testes falharam: {failed_tests}")
        print(f"   üìà Taxa de sucesso: {success_rate:.1f}%")
        
        # Status baseado na taxa de sucesso
        if success_rate >= 95:
            status = "üü¢ EXCELENTE"
        elif success_rate >= 85:
            status = "üü° BOM"
        elif success_rate >= 70:
            status = "üü† REGULAR"
        else:
            status = "üî¥ CR√çTICO"
        
        print(f"   üéØ Status geral: {status}")
        
        # An√°lise por categoria
        print("\n   üìã Detalhes por categoria de amea√ßa:")
        categories = security_data.get('categories', {})
        
        category_results = {
            'sql_injection': 'Inje√ß√£o SQL',
            'xss': 'Cross-Site Scripting (XSS)',
            'command_injection': 'Inje√ß√£o de Comando',
            'path_traversal': 'Path Traversal',
            'email_validation': 'Valida√ß√£o de Email',
            'url_validation': 'Valida√ß√£o de URL'
        }
        
        for cat_key, cat_name in category_results.items():
            if cat_key in categories:
                cat_data = categories[cat_key]
                if isinstance(cat_data, list):
                    total_cat = len(cat_data)
                    passed_cat = sum(1 for test in cat_data if test.get('blocked', False) or test.get('valid', False))
                    rate_cat = (passed_cat / total_cat * 100) if total_cat > 0 else 0
                    print(f"      ‚Ä¢ {cat_name}: {passed_cat}/{total_cat} ({rate_cat:.1f}%)")
    
    print("\n2. COMPONENTES DO SISTEMA ANALISADOS")
    print("-" * 70)
    
    components_status = {
        "üîç Input Validator": {
            "status": "‚úÖ OPERACIONAL",
            "description": "Sistema de valida√ß√£o corrigido e funcionando",
            "details": "Detecta SQL injection, XSS, command injection, path traversal"
        },
        "üõ°Ô∏è Security Middleware": {
            "status": "‚úÖ ATIVO",
            "description": "Middleware de seguran√ßa implementado",
            "details": "Rate limiting, IP blocking, request validation"
        },
        "üìù Logging System": {
            "status": "‚úÖ FUNCIONANDO",
            "description": "Sistema de logs inicializado",
            "details": "Registrando eventos de seguran√ßa e sistema"
        },
        "üåê API Server": {
            "status": "‚ö†Ô∏è CONFIGURA√á√ÉO PENDENTE",
            "description": "Problemas de importa√ß√£o identificados",
            "details": "Requer corre√ß√£o de depend√™ncias"
        },
        "ü§ñ ML Components": {
            "status": "‚ö†Ô∏è EM DESENVOLVIMENTO",
            "description": "Componentes ML importados",
            "details": "ABISS, NNIS, LoRa precisam de configura√ß√£o"
        }
    }
    
    for component, info in components_status.items():
        print(f"   {component}")
        print(f"      Status: {info['status']}")
        print(f"      Descri√ß√£o: {info['description']}")
        print(f"      Detalhes: {info['details']}")
        print()
    
    print("3. VULNERABILIDADES IDENTIFICADAS E A√á√ïES TOMADAS")
    print("-" * 70)
    
    vulnerabilities = [
        {
            "id": "VULN-001",
            "type": "Syntax Error - String Malformada",
            "severity": "CR√çTICA",
            "file": "input_validator.py",
            "status": "‚úÖ CORRIGIDO",
            "action": "String extremamente longa removida e c√≥digo reescrito"
        },
        {
            "id": "VULN-002",
            "type": "Import Error - ValidationResult",
            "severity": "M√âDIA",
            "file": "security.py",
            "status": "üîç IDENTIFICADO",
            "action": "Requer corre√ß√£o de importa√ß√£o de classe"
        },
        {
            "id": "VULN-003",
            "type": "Configuration Error - ABISS",
            "severity": "BAIXA",
            "file": "main.py",
            "status": "üîç IDENTIFICADO",
            "action": "Configura√ß√£o de sistema ML pendente"
        }
    ]
    
    for vuln in vulnerabilities:
        print(f"   {vuln['id']} - {vuln['type']}")
        print(f"      Severidade: {vuln['severity']}")
        print(f"      Arquivo: {vuln['file']}")
        print(f"      Status: {vuln['status']}")
        print(f"      A√ß√£o: {vuln['action']}")
        print()
    
    print("4. EFIC√ÅCIA DO SISTEMA DE DEFESA")
    print("-" * 70)
    
    if security_data:
        print("   üéØ AMEA√áAS BLOQUEADAS COM SUCESSO:")
        
        threat_stats = {
            'sql_injection': 0,
            'xss': 0,
            'command_injection': 0,
            'path_traversal': 0
        }
        
        categories = security_data.get('categories', {})
        for category, tests in categories.items():
            if isinstance(tests, list):
                for test in tests:
                    threats = test.get('threats', [])
                    if test.get('blocked', False):
                        for threat in threats:
                            if threat in threat_stats:
                                threat_stats[threat] += 1
        
        print(f"      ‚Ä¢ Inje√ß√µes SQL bloqueadas: {threat_stats['sql_injection']}")
        print(f"      ‚Ä¢ Ataques XSS bloqueados: {threat_stats['xss']}")
        print(f"      ‚Ä¢ Inje√ß√µes de comando bloqueadas: {threat_stats['command_injection']}")
        print(f"      ‚Ä¢ Tentativas de path traversal bloqueadas: {threat_stats['path_traversal']}")
        
        total_blocked = sum(threat_stats.values())
        print(f"\n   üõ°Ô∏è TOTAL DE AMEA√áAS BLOQUEADAS: {total_blocked}")
    
    print("\n5. RECOMENDA√á√ïES PRIORIT√ÅRIAS")
    print("-" * 70)
    
    recommendations = [
        {
            "priority": "üî¥ ALTA",
            "action": "Corrigir problemas de importa√ß√£o no m√≥dulo de API",
            "timeline": "Imediato"
        },
        {
            "priority": "üü° M√âDIA",
            "action": "Completar configura√ß√£o dos componentes ML",
            "timeline": "1-2 semanas"
        },
        {
            "priority": "üü¢ BAIXA",
            "action": "Implementar monitoramento em tempo real",
            "timeline": "1 m√™s"
        },
        {
            "priority": "üü¢ BAIXA",
            "action": "Adicionar sistema de alertas autom√°ticos",
            "timeline": "1 m√™s"
        }
    ]
    
    for rec in recommendations:
        print(f"   {rec['priority']} {rec['action']}")
        print(f"      Timeline: {rec['timeline']}")
        print()
    
    print("6. CONCLUS√ÉO EXECUTIVA")
    print("-" * 70)
    
    if security_data:
        success_rate = (security_data.get('passed_tests', 0) / security_data.get('total_tests', 1) * 100)
        
        print(f"   üìä SCORE FINAL DE SEGURAN√áA: {success_rate:.1f}%")
        
        if success_rate >= 95:
            conclusion = "üü¢ O sistema de defesa est√° EXCELENTE e pronto para produ√ß√£o."
        elif success_rate >= 85:
            conclusion = "üü° O sistema de defesa est√° BOM com pequenos ajustes necess√°rios."
        elif success_rate >= 70:
            conclusion = "üü† O sistema de defesa est√° REGULAR e precisa de melhorias."
        else:
            conclusion = "üî¥ O sistema de defesa est√° CR√çTICO e requer aten√ß√£o imediata."
        
        print(f"\n   {conclusion}")
        
        print("\n   ‚úÖ PONTOS FORTES:")
        print("      ‚Ä¢ Sistema de valida√ß√£o de entrada altamente eficaz")
        print("      ‚Ä¢ Detec√ß√£o robusta de m√∫ltiplas categorias de amea√ßas")
        print("      ‚Ä¢ Sistema de logging operacional")
        print("      ‚Ä¢ Middleware de seguran√ßa ativo")
        
        print("\n   ‚ö†Ô∏è √ÅREAS DE MELHORIA:")
        print("      ‚Ä¢ Corre√ß√£o de problemas de importa√ß√£o")
        print("      ‚Ä¢ Configura√ß√£o completa dos componentes ML")
        print("      ‚Ä¢ Testes de integra√ß√£o mais abrangentes")
    
    # Salvar relat√≥rio final
    final_data = {
        "timestamp": datetime.now().isoformat(),
        "security_tests": security_data,
        "components_status": components_status,
        "vulnerabilities": vulnerabilities,
        "recommendations": recommendations,
        "conclusion": {
            "score": success_rate if security_data else 0,
            "status": conclusion if security_data else "Dados n√£o dispon√≠veis"
        }
    }
    
    with open('relatorio_consolidado_final.json', 'w', encoding='utf-8') as f:
        json.dump(final_data, f, indent=2, ensure_ascii=False)
    
    print("\n" + "="*100)
    print("üìÑ RELAT√ìRIO CONSOLIDADO SALVO EM: relatorio_consolidado_final.json")
    print("="*100)

def load_security_report():
    """Carrega o relat√≥rio de seguran√ßa"""
    try:
        if os.path.exists('security_test_report.json'):
            with open('security_test_report.json', 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"Erro ao carregar relat√≥rio de seguran√ßa: {e}")
    return None

if __name__ == "__main__":
    generate_consolidated_report()