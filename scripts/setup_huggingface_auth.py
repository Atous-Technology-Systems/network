#!/usr/bin/env python3
"""
Script para configurar autentica√ß√£o do Hugging Face
"""

import subprocess
import sys
from pathlib import Path

def check_huggingface_cli():
    """Verifica se huggingface_hub est√° instalado"""
    try:
        import huggingface_hub
        return True
    except ImportError:
        return False

def install_huggingface_hub():
    """Instala huggingface_hub"""
    print("üì¶ Instalando huggingface_hub...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "huggingface_hub"])
        print("‚úÖ huggingface_hub instalado com sucesso!")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Falha ao instalar huggingface_hub")
        return False

def setup_authentication():
    """Configura autentica√ß√£o do Hugging Face"""
    print("üîê Configurando autentica√ß√£o do Hugging Face...")
    print("\nüìã Op√ß√µes:")
    print("1. Login interativo (recomendado)")
    print("2. Usar modelo p√∫blico alternativo")
    print("3. Pular autentica√ß√£o (modo simula√ß√£o)")
    
    choice = input("\nEscolha uma op√ß√£o (1-3): ").strip()
    
    if choice == "1":
        print("\nüåê Abrindo login do Hugging Face...")
        print("   1. Ser√° aberto um navegador")
        print("   2. Fa√ßa login na sua conta Hugging Face")
        print("   3. Aceite os termos do modelo Gemma")
        print("   4. Copie o token gerado")
        
        try:
            subprocess.run([sys.executable, "-m", "huggingface_hub.commands.huggingface_cli", "login"])
            return True
        except Exception as e:
            print(f"‚ùå Erro no login: {e}")
            return False
    
    elif choice == "2":
        print("\nüîÑ Configurando modelo p√∫blico alternativo...")
        return setup_alternative_model()
    
    elif choice == "3":
        print("\n‚ö†Ô∏è  Configurando modo simula√ß√£o...")
        return setup_simulation_mode()
    
    else:
        print("‚ùå Op√ß√£o inv√°lida")
        return False

def setup_alternative_model():
    """Configura modelo alternativo p√∫blico"""
    # Modelos p√∫blicos similares ao Gemma
    alternatives = [
        ("microsoft/DialoGPT-medium", "DialoGPT Medium - Conversacional"),
        ("distilgpt2", "DistilGPT2 - Pequeno e r√°pido"),
        ("gpt2", "GPT2 - Cl√°ssico"),
        ("microsoft/DialoGPT-small", "DialoGPT Small - Muito r√°pido")
    ]
    
    print("\nüìã Modelos alternativos dispon√≠veis:")
    for i, (model, desc) in enumerate(alternatives, 1):
        print(f"   {i}. {model} - {desc}")
    
    choice = input("\nEscolha um modelo (1-4): ").strip()
    
    try:
        choice_num = int(choice)
        if 1 <= choice_num <= len(alternatives):
            selected_model = alternatives[choice_num - 1][0]
            
            # Atualizar configura√ß√£o
            update_config_with_model(selected_model)
            return True
        else:
            print("‚ùå Escolha inv√°lida")
            return False
    except ValueError:
        print("‚ùå Entrada inv√°lida")
        return False

def setup_simulation_mode():
    """Configura modo simula√ß√£o"""
    update_config_with_simulation()
    return True

def update_config_with_model(model_name):
    """Atualiza configura√ß√£o com novo modelo"""
    config = {
        "model_name": model_name,
        "model_params": {
            "torch_dtype": "float32",
            "device_map": "auto",
            "low_cpu_mem_usage": True,
            "trust_remote_code": False  # Modelos p√∫blicos n√£o precisam
        },
        "pipeline_params": {
            "max_length": 256,
            "temperature": 0.7,
            "do_sample": True,
            "top_p": 0.9,
            "pad_token_id": 50256  # Token padr√£o para GPT
        },
        "memory_size": 1000,
        "threat_threshold": 0.7,
        "simulation_mode": False
    }
    
    # Salvar configura√ß√£o
    import json
    with open("gemma_config.json", "w") as f:
        json.dump(config, f, indent=2)
    
    print(f"‚úÖ Configura√ß√£o atualizada com modelo: {model_name}")

def update_config_with_simulation():
    """Atualiza configura√ß√£o para modo simula√ß√£o"""
    config = {
        "model_name": "simulation-model",
        "model_params": {},
        "pipeline_params": {},
        "memory_size": 1000,
        "threat_threshold": 0.7,
        "simulation_mode": True
    }
    
    # Salvar configura√ß√£o
    import json
    with open("gemma_config.json", "w") as f:
        json.dump(config, f, indent=2)
    
    print("‚úÖ Configura√ß√£o atualizada para modo simula√ß√£o")

def fix_python_syntax():
    """Corrige erro de sintaxe no arquivo de configura√ß√£o"""
    main_file = Path("atous_sec_network/__main__.py")
    
    if main_file.exists():
        with open(main_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Corrigir false/true para False/True
        content = content.replace('"simulation_mode": false', '"simulation_mode": False')
        content = content.replace('"simulation_mode": true', '"simulation_mode": True')
        content = content.replace('false}', 'False}')
        content = content.replace('true}', 'True}')
        
        with open(main_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ Corrigido erro de sintaxe Python")

def main():
    """Fun√ß√£o principal"""
    print("üîê Configurador de Autentica√ß√£o Hugging Face")
    print("=" * 50)
    
    # Corrigir sintaxe primeiro
    fix_python_syntax()
    
    # Verificar huggingface_hub
    if not check_huggingface_cli():
        if not install_huggingface_hub():
            print("‚ùå N√£o foi poss√≠vel instalar huggingface_hub")
            return 1
    
    # Configurar autentica√ß√£o
    if setup_authentication():
        print("\n‚úÖ Configura√ß√£o conclu√≠da!")
        print("\nüöÄ Pr√≥ximos passos:")
        print("1. Execute: python update_model_configs.py")
        print("2. Teste: python test_gemma_integration.py")
        return 0
    else:
        print("\n‚ùå Configura√ß√£o falhou!")
        return 1

if __name__ == "__main__":
    sys.exit(main())