#!/usr/bin/env python3
"""
Script para testar todos os endpoints problem√°ticos
"""
import requests
import json

def test_endpoints():
    """Testa todos os endpoints problem√°ticos"""
    base_url = "http://127.0.0.1:8000"
    
    print("üß™ Testando endpoints problem√°ticos...")
    print("=" * 50)
    
    # 1. Testar health check
    print("\n1Ô∏è‚É£ Testando health check...")
    try:
        response = requests.get(f"{base_url}/health", timeout=5)
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ Health check funcionando")
        else:
            print(f"   ‚ùå Health check falhou: {response.text}")
    except Exception as e:
        print(f"   ‚ùå Health check erro: {e}")
    
    # 2. Testar WebSocket endpoint
    print("\n2Ô∏è‚É£ Testando WebSocket endpoint...")
    try:
        response = requests.get(f"{base_url}/api/llm/ws", timeout=5)
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ WebSocket funcionando")
        elif response.status_code == 404:
            print("   ‚ùå WebSocket ainda retornando 404")
        else:
            print(f"   ‚ö†Ô∏è  WebSocket status inesperado: {response.text}")
    except Exception as e:
        print(f"   ‚ùå WebSocket erro: {e}")
    
    # 3. Testar endpoint de m√©tricas LLM
    print("\n3Ô∏è‚É£ Testando endpoint de m√©tricas LLM...")
    try:
        response = requests.get(f"{base_url}/api/llm/metrics", timeout=5)
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ M√©tricas LLM funcionando")
        elif response.status_code == 404:
            print("   ‚ùå M√©tricas LLM ainda retornando 404")
        else:
            print(f"   ‚ö†Ô∏è  M√©tricas LLM status inesperado: {response.text}")
    except Exception as e:
        print(f"   ‚ùå M√©tricas LLM erro: {e}")
    
    # 4. Testar endpoint de consulta LLM
    print("\n4Ô∏è‚É£ Testando endpoint de consulta LLM...")
    try:
        payload = {
            "question": "Como est√° o sistema?",
            "include_system_context": True
        }
        response = requests.post(f"{base_url}/api/llm/query", json=payload, timeout=10)
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ Consulta LLM funcionando")
        else:
            print(f"   ‚ùå Consulta LLM falhou: {response.text}")
    except Exception as e:
        print(f"   ‚ùå Consulta LLM erro: {e}")
    
    # 5. Testar endpoint de registro (deve dar erro de valida√ß√£o, n√£o 500)
    print("\n5Ô∏è‚É£ Testando endpoint de registro...")
    try:
        payload = {
            "username": "testuser",
            "email": "test@example.com",
            "password": "TestPass123!",
            "roles": ["admin"]  # Role v√°lido
        }
        response = requests.post(f"{base_url}/auth/register", json=payload, timeout=10)
        print(f"   Status: {response.status_code}")
        if response.status_code == 422:
            print("   ‚úÖ Registro retornando erro de valida√ß√£o (esperado)")
        elif response.status_code == 500:
            print("   ‚ùå Registro retornando erro interno (problema)")
        else:
            print(f"   ‚ö†Ô∏è  Registro status inesperado: {response.text}")
    except Exception as e:
        print(f"   ‚ùå Registro erro: {e}")

def main():
    """Fun√ß√£o principal"""
    test_endpoints()

if __name__ == "__main__":
    main()
