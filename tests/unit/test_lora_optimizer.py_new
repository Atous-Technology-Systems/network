    def test_gpio_initialization(self):
        """Tests GPIO initialization"""
        with patch('RPi.GPIO') as mock_gpio:
            # Setup expected pin modes
            mock_gpio.BCM = 11
            mock_gpio.OUT = 0
            mock_gpio.IN = 1
            
            # Create interface
            interface = LoraHardwareInterface()
            
            # Verify GPIO setup
            mock_gpio.setmode.assert_called_with(mock_gpio.BCM)
            mock_gpio.setup.assert_any_call(17, mock_gpio.OUT)  # Reset pin
            mock_gpio.setup.assert_any_call(18, mock_gpio.IN)   # Ready pin
    
    def test_at_command_validation(self):
        """Tests AT command validation"""
        with patch('serial.Serial') as mock_serial:
            # Setup mock
            mock_serial.return_value.write.return_value = 10
            mock_serial.return_value.in_waiting = True
            mock_serial.return_value.is_open = True
            mock_serial.return_value.read.return_value = b'OK\r\n'
            
            # Create interface and test
            interface = LoraHardwareInterface()
            
            # Test invalid commands
            with self.assertRaises(ValueError):
                interface.send_command("")  # Empty command
            with self.assertRaises(ValueError):
                interface.send_command("   ")  # Only whitespace
            with self.assertRaises(ValueError):
                interface.send_command(None)  # None command
    
    def test_serial_pool_initialization(self):
        """Tests serial port pooling"""
        ports = ["/dev/ttyUSB0", "/dev/ttyUSB1", "COM1", "COM2"]
        
        with patch('serial.Serial') as mock_serial, \
             patch('serial.tools.list_ports.comports') as mock_comports:
            
            # Setup port listing mock
            mock_comports.return_value = [Mock(device=p) for p in ports]
            
            # Create interface
            interface = LoraHardwareInterface()
            
            # Verify port enumeration
            mock_comports.assert_called_once()
            
            # Verify serial initialization with first port
            mock_serial.assert_called_once()
            self.assertEqual(mock_serial.call_args[1]['port'], "/dev/ttyUSB0")
    
    def test_checksum(self):
        """Tests checksum calculation for command validation"""
        with patch('serial.Serial') as mock_serial:
            interface = LoraHardwareInterface()
            
            # Test sample commands
            cmd = "AT+ADDR=1234"
            cmd_with_checksum = interface.add_checksum(cmd)
            self.assertTrue(interface.verify_checksum(cmd_with_checksum))
            
            # Test tampering detection
            tampered_cmd = cmd_with_checksum[:-2] + "00"  # Change last 2 digits
            self.assertFalse(interface.verify_checksum(tampered_cmd))
